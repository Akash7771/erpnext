# -*- coding: utf-8 -*-
# Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and contributors
# For license information, please see license.txt

from __future__ import unicode_literals
import frappe

from frappe.utils import add_days, getdate, cint, cstr

from frappe import throw, _ , msgprint

from erpnext.utilities.transaction_base import TransactionBase
from erpnext.stock.utils import get_valid_serial_nos
from erpnext.hr.doctype.employee.employee import get_holiday_list_for_employee
from frappe.model.document import Document

class Planning(TransactionBase):
	def validate(self):
		check_duplicate(self)

	def generate_schedule(self):
		self.set('schedules', [])
		frappe.db.sql("""delete from `tabPlanning Detail`
			where parent=%s""", (self.name))
		count = 1
		for d in self.get('maintenance_table'):
			validate_planning_detail(self)
			s_list = []
			s_list = self.create_planning_list(d.from_date, d.to_date, d.no_of_visit,d.periodicity)
			for i in range(d.no_of_visit):
				child = self.append('schedules')
				child.maintenance_type = d.maintenance_type
				child.to_do = d.to_do
				child.scheduled_date = s_list[i].strftime('%Y-%m-%d')
				child.idx = count
				count = count + 1
				child.vendor = d.vendor

		self.save()

	def on_submit(self):
		if not self.get('schedules'):
			throw(_("Please click on 'Generate Schedule' to get schedule"))

		self.validate_schedule()

		scheduled_date = frappe.db.sql("""select scheduled_date
			from `tabPlanning Detail`
			where parent=%s""",
		(self.name),as_dict=1)

		for d in self.get('schedules'):
			subject = frappe._("Maintenance : %s on  %s") % \
				(d.to_do,self.equipment_name)
			description = frappe._("Maintenance:<br> %s <br> %s") % \
			(d.to_do,self.equipment_name)

			frappe.get_doc({
				"doctype": "Planning Calendar",
				"owner": frappe.session.user,
				"subject": subject,
				"maintenance_type":d.maintenance_type,
				"description": description,
				"starts_on": cstr(d.scheduled_date) + " 10:00:00",
				"ends_on": cstr(d.scheduled_date) + " 6:00:00",
				"ref_type": self.doctype,
				"ref_name": self.name
			}).insert(ignore_permissions=1)

		frappe.db.set(self, 'status', 'Submitted')

	def on_update(self):
		frappe.db.set(self, 'status', 'Draft')

	def on_cancel(self):
		frappe.db.set(self, 'status', 'Cancelled')
		delete_plans(self.doctype, self.name)

	def validate_schedule(self):
		for d in self.get("schedules"):
			if not d:
				throw(_("Please click on 'Generate Schedule'"))

	def create_planning_list(self, from_date, to_date, no_of_visit, periodicity):
		schedule_list = []
		start_date_copy = from_date
		next_date = {
			"Weekly": 7,
			"Monthly": 30,
			"Quarterly": 91,
			"Half Yearly": 182,
			"Yearly": 365
		}[periodicity]


		date_diff = (getdate(to_date) - getdate(from_date)).days
		#msgprint("%s "%frappe.session.user)
		add_by = 0
		for visit in range(cint(no_of_visit)):
			if (getdate(start_date_copy) < getdate(to_date)):
				start_date_copy = add_days(start_date_copy, add_by)
				if len(schedule_list) < no_of_visit:
					schedule_date = self.validate_planning_date_for_holiday_list(getdate(start_date_copy))
					if schedule_date > getdate(to_date):
						schedule_date = getdate(to_date)
					schedule_list.append(schedule_date)
					add_by = next_date

		return schedule_list

	def validate_planning_date_for_holiday_list(self,from_date):
		return from_date

def delete_plans(ref_type, ref_name):
	frappe.delete_doc("Planning Calendar", frappe.db.sql_list("""select name from `tabPlanning Calendar`
	where ref_type=%s and ref_name=%s""", (ref_type, ref_name)), for_reload=True)


def check_duplicate(self):
	plan_exist = frappe.db.sql("""select name from `tabPlanning`
		where equipment_id='%s' and docstatus < 2"""%(self.equipment_id),as_list=True)
	pln = ""
	if plan_exist:
		for plan in plan_exist:
			pln = str(plan[0])
	if plan_exist:
		if pln != self.name:
			frappe.throw(_("%s Already Exist!"%(self.equipment_id)))

def validate_planning_detail(self):
	if not self.get('maintenance_table'):
		throw(_("Please enter Equipment Details First"))

	for d in self.get('maintenance_table'):
		if not d.from_date or not d.to_date:
			throw(_("Please select From Date and To Date for Row No {0}".format(d.idx)))
		elif not d.periodicity:
			throw(_("Please Select the Periodicity"))
		elif not d.no_of_visit:
			throw(_("Please mention no of visits required"))

	if getdate(d.from_date) >= getdate(d.to_date):
		throw(_("From date should be less than To date for {0}").format(d.equipment_id))


def validate_schedule_date_for_holiday_list(self, schedule_date, sales_person):
	validated = False

	employee = frappe.db.get_value("Sales Person", sales_person, "employee")
	if employee:
		holiday_list = get_holiday_list_for_employee(employee)
	else:
		holiday_list = frappe.db.get_value("Company", self.company, "default_holiday_list")

	holidays = frappe.db.sql_list('''select holiday_date from `tabHoliday` where parent=%s''', holiday_list)

	if not validated and holidays:
		# max iterations = len(holidays)
		for i in xrange(len(holidays)):
			if schedule_date in holidays:
				schedule_date = add_days(schedule_date, -1)
			else:
				validated = True
				break

	return schedule_date

@frappe.whitelist()
def equipment_query():
	item_code = frappe.db.sql("""
	SELECT item_code
	FROM `tabItem`
	WHERE is_fixed_asset = '1' and
	item_code not in(SELECT equipment_id FROM `tabPlanning` where docstatus < 2)
	""",as_dict=True)
	#msgprint("%s"%item_code)
	return item_code
